{
  "name": "Confront",
  "tagline": "ConFront - fully customizable CLI for web apps. It is designed to help web app admins save precious time by converting their everyday tasks into simple, easy to remember, customizable commands.",
  "body": "# ConFront\r\nFully customizable **CLI for web apps**. \r\n\r\nThink of it as a command line interface of your operating system that you know and love, but inside your web app.\r\n\r\n## Description\r\nConFront is designed to help web app admins save precious time by converting their everyday tasks into simple, easy to remember, **customizable commands**.\r\n\r\nThese commands can **utilize REST API functions that are already in your app**.\r\n\r\n### Example use case\r\nLet's say your web app has an administration page where admin can log in and perform some repeatable tasks. This page contains:\r\n* Clear cache button\r\n* Add user form\r\n* Edit user form\r\n* Backup database form with some checkboxes and datepicker for additional options\r\n\r\nAll of these call specific functions that send REST requests to the backend using promises. After promise is resolved/rejected proper notification is displayed containing server response.\r\n\r\nThis is where ConFront comes in. You can perform the same tasks but much quicker and simpler. Just like using terminal in your operating system. Simply open ConFront (`` CTRL+` `` on Win/Linux or `` Control+` `` on mac) and enter your command. For example: \r\n\r\n| Task                                    | Example command                                                 |\r\n| --------------------------------------- | --------------------------------------------------------------- |\r\n| Clear cache                             | `clearcache`                                                    |\r\n| Add user                                | `adduser \"John Smith\" --group Users`                            |\r\n| Change user permissions and email       | `changeuser 123456 --group Admins --email newemail@example.com` |\r\n| Backup database                         | `db backup`                                                     |\r\n| Backup database (with additional flags) | `db backup -aq --date 2016.11.11`                               | \r\n\r\n## Features\r\n* Custom commands\r\n* Supports promises, multiple arguments and flags \r\n* Sync and async error handling\r\n* Tab auto-completion\r\n* Command history with up and down arrows\r\n* Works with every framework\r\n* No external dependencies\r\n* Custom css templates\r\n\r\n## Installing\r\n```\r\nnpm install confront --save\r\n```\r\n\r\n### ES6 Import\r\n```\r\nimport ConFront from \"confront\";\r\nConFront();\r\n```\r\n\r\n### Script src\r\n**It's strongly recommended to use ES6 Import as shown above instead of this**\r\n\r\nYou can use ConFront by adding script tag to your HTML:\r\n```html\r\n<script src=\"./node_modules/confront/dist/confront.js\"></script>\r\n```\r\nIt exposes window.ConFront and you can use it like this:\r\n```javascript\r\nConFront.default();\r\n```\r\n\r\n### CSS\r\nFor ConFront to work properly you need to style it with CSS. You can use the default styles:\r\n```html\r\n<link rel=\"stylesheet\" href=\"./node_modules/confront/dist/confront.css\">\r\n```\r\n\r\n## Getting started\r\n\r\n###Basic usage\r\nAfter you have ConFront running, open your app and simply press `` CTRL+` `` (Windows/Linux) or `` Control+` `` (macOS). This shortcut can be [configured](#Configuration). \r\n\r\nType in `help` and press Enter/Return to see all the currently available commands.\r\n\r\n### Syntax\r\n```\r\n<command_name> [<argument>...] [<flag> [<flag_argument>...]]... \r\n```\r\n\r\nHere's how to read the above:\r\n\r\n| Notation                        | Description                                   |\r\n| ------------------------------- | --------------------------------------------- |\r\n| `<Text inside angle brackets>`  | Placeholder for which you must supply a value |\r\n| `[Text inside square brackets]` | Optional items                                |\r\n| `Ellipsis (â€¦)`                  | Items that can be repeated                    |\r\n\r\nIn other words:\r\n\r\n1. Name of command (**the only thing required, rest is optional**)\r\n2. Space\r\n3. List of arguments separated by spaces (if argument has a space inside, you can wrap it with double-quotes: `command short_arg \"long argument\"`)\r\n4. Space\r\n5. List of short (prefixed with `-`) and long (prefixed with `--`) flags separated by spaces. Each flag can have their own list of arguments separated by spaces\r\n\r\nNOTICE:\r\n* Short flags can be grouped following one `-` sign without spaces (`-xyz` is equal to `-x -y -z`).\r\n* Arguments are always assigned to the last flag that proceeds them (`command -xyz myarg` means that `myarg` is assigned to `z` flag)\r\n\r\n### Custom commands \r\nConFront is pretty much useless until you power it up with your custom commands. You can pass commands object as the first argument when calling ConFront.\r\n\r\nLet's create a simple command that adds together two given numbers:\r\n```javascript\r\nConFront({\r\n    \"add\": {\r\n        cmd: (args) => args[0] + args[1]\r\n    }\r\n});\r\n```\r\nNow when you open up ConFront in your app and type in `add 1 2`, you'll get the result displayed as expected.\r\n```\r\n> add 1 2\r\n3\r\n```\r\nAdding a custom command makes it visible in **help** - a built-in command that lists all the available commands.\r\nSpecifying additional `\"desc\"` key to `add` command will make it display in help:\r\n```javascript\r\nConFront({\r\n    \"add\": {\r\n        cmd: (args) => args[0] + args[1],\r\n        desc: \"Adds together two numbers\"\r\n    }\r\n});\r\n```\r\n```\r\n> help\r\nadd:            Adds together two numbers\r\nclear:          Clears console \r\nclearhistory:   Clears history \r\nhelp:           This help\r\n```\r\n### Flags\r\nLet's enhance \"add\" command a little by adding support for `-a` flag that changes command behaviour so that it sums all the given numbers instead of the first two.\r\nAnd while we're at it, let's do some code separation for better readability.\r\n```javascript\r\nfunction add(args, flags) {\r\n    if (flags[\"a\"]) {\r\n        return args.reduce((total, number) => total + number);\r\n    } else {\r\n        return args[0] + args[1];\r\n    }\r\n}\r\nconst commands = {\r\n    \"add\": {\r\n        cmd: (args, flags) => add(args, flags),\r\n        desc: \"Adds together two numbers\"\r\n    }\r\n};\r\nConFront(commands);\r\n```\r\n```\r\n> add 1 2 3 4 5 -a\r\n15\r\n```\r\n\r\nIt also supports long flags, like `--limit`. Also all flags can have their own arguments. Here's the example:\r\n```javascript\r\nfunction add(args, shortFlags, longFlags) {\r\n    if (shortFlags[\"a\"] || longFlags[\"all\"]) {\r\n        return args.reduce((total, number) => total + number);\r\n    } else if (longFlags[\"limit\"]) {\r\n        return args.slice(0, longFlags[\"limit\"]).reduce((total, number) => total + number);\r\n    } else {\r\n        return args[0] + args[1];\r\n    }\r\n}\r\nconst commands = {\r\n    \"add\": {\r\n        cmd: (args, shortFlags, longFlags) => add(args, shortFlags, longFlags),\r\n        desc: \"Adds together two numbers\"\r\n    }\r\n};\r\nConFront(commands);\r\n```\r\n```\r\n> add 1 2 3 4 5 --limit 3\r\n6\r\n> add 1 2 3 4 5 --limit 1\r\n1\r\n> add 1 2 3 4 5 --limit 4\r\n10\r\n```\r\n\r\nShort flags can be grouped. For example command:\r\n```\r\nbackupdb -azm \"My backup\" --date 2016.11.11 --log info email 7\r\n```\r\nWill give you this short flags object:\r\n```json\r\n{\r\n    \"a\": [],\r\n    \"z\": [],\r\n    \"m\": [\"My backup\"]\r\n}\r\n```\r\nAnd long flags:\r\n```json\r\n{\r\n    \"date\": [\"2016.11.11\"],\r\n    \"log\":  [\"info\", \"email\", 7]\r\n}\r\n```\r\n\r\n### Promises\r\nConFront was designed with promises in mind, so you don't have to worry about it. ConFront waits for promise to be resolved or rejected and in the meantime shows a spinner animation. When the promise is fulfilled, it displays the result (if resolved) or error (if rejected).\r\n\r\nExample:\r\n```javascript\r\nfunction promiseme() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(function () {\r\n            resolve(['from resolved promise', \"dsadsada\", '222', {\"aaa\": 22, \"ss\": 4}]);\r\n        }, 2000)\r\n    })\r\n}\r\n\r\nfunction rejectme() {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(function () {\r\n            reject(\"Promise rejected\");\r\n        }, 2000)\r\n    })\r\n}\r\n\r\nconst commands = {\r\n    \"promiseme\": {\r\n        cmd: () => promiseme(),\r\n        desc: \"returns promise (resolved)\"\r\n    },\r\n    \"rejectme\": {\r\n        cmd: () => rejectme(),\r\n        desc: \"returns promise (rejected)\"\r\n    },\r\n};\r\nConFront(commands);\r\n```\r\n```\r\n> promiseme\r\n(spinner for two seconds)\r\n[\r\n  \"from resolved promise\",\r\n  \"list item\",\r\n  \"222\",\r\n  {\r\n    \"aaa\": 22,\r\n    \"ss\": 4\r\n  }\r\n]\r\n```\r\n```\r\n> rejectme\r\n(spinner for two seconds)\r\n(Error: ) Promise rejected\r\n```\r\n\r\n### HTML\r\nYour command can also return HTML which will be displayed inside ConFront. ConFront will try to guess if the returned value is HTML, but you can spare it the work by explicitly setting type to \"html\". \r\nIt's useful especially when we need to format the outcome, for example built-in `help` command is using html table:\r\n```javascript\r\nconst displayHelp = () => {\r\n\tconst tableStart = \"<table class='confront-table'>\";\r\n\tconst tableEnd = \"</table>\";\r\n\tlet rows = [];\r\n\tObject.keys(tasks).forEach((key) => {\r\n\t\tconst name = key;\r\n\t\tconst desc = tasks[key].desc;\r\n\t\trows.push(`<tr><td class=\"confront-label\">${name}: </td><td class=\"confront-value\">${desc ? desc : \"\"}</td>`);\r\n\t});\r\n\treturn tableStart + rows.sort().join(\"\") + tableEnd;\r\n};\r\nconst commands = {\r\n    \"help\": {\r\n        cmd: () => displayHelp(),\r\n        desc: \"Displays this help\",\r\n        type: \"html\",\r\n    },\r\n};\r\nConFront(commands);\r\n```\r\n\r\n## Configuration\r\nCustom configuration can be passed as a second argument to ConFront. Right now it allows to change three basic values. Here's the example:\r\n```javascript\r\nconst config = {\r\n    shortcutActivator: \"ctrl\",\r\n    shortcutKeyCode: 220,\r\n    convertTypes: false,\r\n};\r\nConFront(commands, config);\r\n```\r\n| Parameter         | Description                                                  | Possible options                        | Default value |\r\n| ----------------- | ------------------------------------------------------------ | --------------------------------------- | ------------- |\r\n| shortcutActivator | Key to be pressed to activate shortcut                       | \"ctrl\", \"ctrl+shift\", \"ctrl+alt\"        | \"ctrl\"        |\r\n| shortcutKeyCode   | Code of the key to be pressed when activator enabled         | See [keycode.info](http://keycode.info) | 220           |\r\n| convertTypes      | Automatically convert types from string (number and boolean) | true, false                             | true          |\r\n| welcomeMessage    | Message that is shown at the top when running ConFront       | Any string                              |               |\r\n\r\n## Translation\r\nThere are some build in strings that can be translated. Custom translation can be passed as a third argument to ConFront:\r\n```javascript\r\nconst translation = {\r\n    \"err.cmdNotFound\": \"Custom command not found translation\"\r\n};\r\nConFront(commands, config, translation);\r\n```\r\nHere are all the default values:\r\n```json\r\n{\r\n\t\"desc.clear\": \"Clears console\",\r\n\t\"desc.clearHistory\": \"Clears history\",\r\n\t\"desc.help\": \"This help\",\r\n\t\"err.cmdNotFound\": \"Command not found\",\r\n\t\"historyCleared\": \"History cleared\"\r\n}\r\n```\r\n\r\n## License\r\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}